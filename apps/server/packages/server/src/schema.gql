# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ServerUser {
  user: User!
  role: Role!
}

type Role implements BaseEntity {
  id: ID!
  createdAt: DateTime!
  name: String!
  isDefault: Boolean!
  color: HexColorCode
  permissions: [ServerPermission!]!
}

interface BaseEntity {
  id: ID!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.
"""
scalar HexColorCode @specifiedBy(url: "https://en.wikipedia.org/wiki/Web_colors")

enum ServerPermission {
  ManageChannels
  PrivateChannels
  RestrictedChannels
  ManageServer
  ManageUsers
  SendMessages
  ManageMessages
  ManagePosts
  ManageComments
  ManageFolders
  AddPostToFolder
  DisplayRoleSeparately
  Admin
}

type Image {
  originalUrl: String!
  originalWidth: PositiveInt!
  originalHeight: PositiveInt!
  smallUrl: String
  popupUrl: String
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

type LinkMetadata {
  title: String
  description: String
  date: DateTime
  author: String
  publisher: String
  imageUrl: String
  image: Image
  logoUrl: String
  logo: Image
  url: String
  twitterCard: String
  themeColor: String
}

type PostImage {
  image: Image!
  linkUrl: String
  caption: String
}

type Comment implements BaseEntity {
  id: ID!
  createdAt: DateTime!
  author: User
  serverUser: ServerUser
  post: Post!
  text: String!
  parentComment: Comment
  voteCount: Int!
  voteType: VoteType!
  isPinned: Boolean!
  pinnedAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean!
  linkMetadatas: [LinkMetadata!]!
}

enum VoteType {
  Up
  None
  Down
}

type Post implements BaseEntity {
  id: ID!
  createdAt: DateTime!
  title: String!
  text: String
  linkUrl: String
  linkMetadata: LinkMetadata
  linkMetadatas: [LinkMetadata!]!
  images: [PostImage!]!
  author: User
  serverUser: ServerUser
  isPinned: Boolean!
  pinnedAt: DateTime
  server: Server!
  folders: [Folder!]
  voteCount: Int!
  voteType: VoteType!
  commentCount: NonNegativeInt!
  updatedAt: DateTime
  isDeleted: Boolean!
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

type Group implements BaseEntity {
  id: ID!
  createdAt: DateTime!
  owner: User!
  name: String!
  avatarUrl: String
  lastMessageAt: DateTime!
  users: [User!]!
  unreadCount: NonNegativeInt!
}

type File {
  url: String!
  mime: String!
  filename: String!
  size: Float!
}

type Channel implements BaseEntity {
  id: ID!
  createdAt: DateTime!
  name: String
  description: String
  server: Server!
  type: ChannelType!
  mentionCount: NonNegativeInt!
  isUnread: Boolean!
  isDefault: Boolean!
}

enum ChannelType {
  Public
  Restricted
  Private
}

type Server implements BaseEntity {
  id: ID!
  createdAt: DateTime!
  name: String!
  displayName: String!
  description: String
  owner: User!
  roles: [Role!]!
  folders: [Folder!]!
  category: ServerCategory!
  userCount: NonNegativeInt!
  onlineCount: NonNegativeInt!
  avatarUrl: String
  bannerUrl: String
  isBanned: Boolean!
  isDeleted: Boolean!
  isPublic: Boolean!
  isChatEnabled: Boolean!
  isDownvotesEnabled: Boolean!
  channels: [Channel!]!
  permissions: [ServerPermission!]!
  isFeatured: Boolean!
  isJoined: Boolean!
}

enum ServerCategory {
  Arts
  Business
  Culture
  Discussion
  Entertainment
  Gaming
  Health
  Hobbies
  Lifestyle
  Memes
  Meta
  News
  Politics
  Programming
  Science
  Sports
  Technology
  Other
}

type Folder implements BaseEntity {
  id: ID!
  createdAt: DateTime!
  name: String!
  description: String
  avatarUrl: String
  owner: User
  server: Server
  postCount: NonNegativeInt!
  followerCount: NonNegativeInt!
  isFollowing: Boolean!
  isCollaborative: Boolean!
  visibility: FolderVisibility!
}

enum FolderVisibility {
  Public
  Friends
  Private
  Unlisted
}

type User implements BaseEntity {
  id: ID!
  createdAt: DateTime!
  email: EmailAddress!
  username: String!
  lastLoginAt: DateTime
  lastMessageAt: DateTime
  avatarUrl: String
  onlineStatus: OnlineStatus!
  isAdmin: Boolean!
  color: Color!
  isCurrentUser: Boolean!
  groups: [Group!]!
  relatedUsers: [User!]!
  folders: [Folder!]!
  servers: [Server!]!
  unreadCount: NonNegativeInt!
  showChat: Boolean!
  relationshipStatus: RelationshipStatus!
  isOg: Boolean!
  isStaff: Boolean!
  isOnline: Boolean!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

enum OnlineStatus {
  Online
  Away
  DoNotDisturb
  Offline
}

enum Color {
  Red
  Yellow
  Green
  Blue
  Indigo
  Purple
  Pink
}

enum RelationshipStatus {
  None
  FriendRequestOutgoing
  FriendRequestIncoming
  Friends
  Blocking
  Blocked
}

type Query {
  getUser: User
}

type Mutation {
  register(input: RegisterInput!): User!
  login(input: LoginInput!): User!
  logout: Boolean!
  refresh: Boolean!
  changePassword(input: ChangePasswordInput!): User!
}

input RegisterInput {
  email: EmailAddress!
  username: String!
  password: String!
}

input LoginInput {
  email: EmailAddress!
  password: String!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}